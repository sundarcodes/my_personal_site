<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Observables on Sundar</title>
    <link>sundarcodes.in/tags/observables/</link>
    <description>Recent content in Observables on Sundar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Dec 2017 00:00:00 +0000</lastBuildDate><atom:link href="sundarcodes.in/tags/observables/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>State Management in Angular 2&#43; apps - Part 3</title>
      <link>sundarcodes.in/blog/ui-state-management-part-3/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>sundarcodes.in/blog/ui-state-management-part-3/</guid>
      <description>In part-1 of this series, we got to know what state is and the need to have a state management solution especially in the case of a large web app. In this post, we will be seeing how we can solve our shared state problem using Observables. We will also see how we can overcome the pitfalls of the Angular services approach discussed in part-2 of this series.
Observables is something that I have seen which unsettles developers.</description>
    </item>
    
  </channel>
</rss>
