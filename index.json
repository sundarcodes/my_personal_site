[{"categories":null,"contents":"This talk looked at Liberty Mutual’s transformation to Continuous Integration, Continuous Delivery, and DevOps. For a large, heavily regulated industry, this task can not only be daunting, but viewed by many as impossible. Often, organizations try to reduce the friction through micro-fixes, but Eddie’s team asked how to change the culture to reduce the friction and concluded with the following final points:\n Don’t mandate DevOps. Give employees the chance to master their discipline with examples to set and follow. Favor deep end-to-end accomplishments over broad but incremental steps forward. Focus on taking the right teams far before encouraging broad adoption. Centralize the platforms and tools that your teams shouldn’t be thinking about. Provide foundational services/commodities and let teams stay on purpose. Incorporate contributions from everyone; don’t stifle autonomy. Stay open to new ways of working. Challenge security policies, but respect intentions. Find new ways to enforce concerns without abandoning precaution.    ","permalink":"/publications/mlflow_talk/","tags":["DevOps","MLflow","Machine Learning","Python"],"title":"Tooling in Maching Learning Lifecycle"},{"categories":null,"contents":"This talk looked at Liberty Mutual’s transformation to Continuous Integration, Continuous Delivery, and DevOps. For a large, heavily regulated industry, this task can not only be daunting, but viewed by many as impossible. Often, organizations try to reduce the friction through micro-fixes, but Eddie’s team asked how to change the culture to reduce the friction and concluded with the following final points:\n Don’t mandate DevOps. Give employees the chance to master their discipline with examples to set and follow. Favor deep end-to-end accomplishments over broad but incremental steps forward. Focus on taking the right teams far before encouraging broad adoption. Centralize the platforms and tools that your teams shouldn’t be thinking about. Provide foundational services/commodities and let teams stay on purpose. Incorporate contributions from everyone; don’t stifle autonomy. Stay open to new ways of working. Challenge security policies, but respect intentions. Find new ways to enforce concerns without abandoning precaution.    ","permalink":"/publications/aws_microservices/","tags":["AWS","Monolith","Software Architecture","Microservices","Service Oriented Architecture"],"title":"Journey from Monolith to Microservices - AWS Story"},{"categories":null,"contents":"Add to Calendar is a react package to add an event to calendar (Google, Outlook, Apple etc). I needed a way to handle the calendar dropdown close event when the mouse is clicked anywhere on the document. I added a callback function that would be passed as a param\n","permalink":"/projects/contributions/react_add_to_calendar/","tags":["React","JavaScript","jest"],"title":"Added a callback props to a React Add to Calendar library"},{"categories":null,"contents":"BuiltWithElm is a place where Elm enthusiasts can post any of their cool projects built on Elm. I wanted to try a functional programming language and got impressed with Elm. I came know about Elm after reading how it has influenced the Flux and Redux architecture that are being used for State management in the front end. Elm is inspired by haskell and it is something that I want to make use for building a production grade web app.\n","permalink":"/projects/contributions/elm_tictactoe/","tags":["Elm","game","functional programming"],"title":"Added my own version of tictactoe game to builtwithelm"},{"categories":null,"contents":"Angular l10n is a Angular localization library that supports text translation, formatting dates and numbers. The number directive that comes as part of this library was missing the thousand\u0026rsquo;s separator. My PR was to add support to the thousand\u0026rsquo;s separator.\n","permalink":"/projects/contributions/angular_i10n/","tags":["Angular","i10n","JavaScript"],"title":"Added support for thousand separator in Angular localization library"},{"categories":null,"contents":"A platform to develop ML (Machine Learning) and RPA (Robotic process automation)\n","permalink":"/projects/creations/nocode_platform/","tags":["AI","ML","Python","React","Mongo","Docker","NestJS","TypeScript","REST APIs","Microservices"],"title":"A no/low code developer platform for building ML \u0026 RPA solutions"},{"categories":null,"contents":"A progressive web app (PWA) place to find and manage events happening around you\n","permalink":"/projects/creations/discord_events/","tags":["React","NodeJS","Express","Firebase","REST APIs","TypeScript"],"title":"Events Management App"},{"categories":null,"contents":"A Mobile App to connect tutors with students and relieve of tutors from the administrative problems\n","permalink":"/projects/creations/tutora/","tags":["React Native","AWS","Amplify","FaunaDB","GraphQL","DynamoDB","TypeScript"],"title":"Tuition Management App"},{"categories":null,"contents":"I find it its always good to work on a pet/side project outside my official dev work as it gives me room to explore new stuffs and in that process help in analyzing the pros/cons of choosing different technologies/frameworks for a use case. I am documenting my thoughts on how I went about choosing the stack (front end/back end technologies, code organization, devops workflow) for one of my side project which was a web app.\nBackend Architecture   Choosing a backend framework for building the API - Rails vs express or Ruby vs JavaScript As I had worked on Rails before I was tempted to go with Rails to build my backend knowing its capabilities and the awesome community. But I decided to go with express as wanted to have one language JavaScript/TypeScript all the way just to be more productive and avoiding the petty issues with the language syntax and not to toggle language switch from Ruby to JS/TS and vice versa often. Also, I wanted to explore and learn express/NodeJs capabilities of building a RESTFUL API.\n  Choosing a NodeJS framework - express vs HAPI vs SAILS After deciding to go with a JS based framework for building the backend, the next task was to pick one. Sails was a big contender as it was inspired from Rails and would make me comfortable working on it as I have got used to the conventions of Rails. But again I wanted to build something from scratch as it would give me a better understanding of express and middlewares and this particular course from Udemy just made me to take my decision easier. So I decided that I will be starting with express as it would be give me more control of my code.\n  Choosing a Database - NoSQL vs RDBMS Now, it was time to pick a database. Again, decisions had to be made. I picked up a NoSQL datastore as it would be more productive for me and my app requirements could change down the line so a NoSQL datastore would cater to it. Also I wanted to explore and learn working on one.\n  Choosing a NoSQL Database - MongoDB vs Cassandara Again we are spoilt for choices a here. I picked up MongoDB, a Document based NoSQL store as it was mature amongst the other offerings. Cassandara was another contender but I stuck to Mongo.\n  Code Infrastructure setup After finalizing the framework and the database, it was time to get my hands dirty by setting up the code skeleton and architecture. I did the following.\n  Dockerization Decided to dockerize the entire setup as it would be easy while deploying and environment setup. I had docker containers for\n Mongo DB Backend Frontend    TypeScript (TS) As I like strong typing, so integrated typescript as all my backend code would be using TypeScript.\n  Testing Framework I chose Jest here as it was the latest amongst the popular JS testing frameworks. Also (spilling the beans here), as I wanted to use React for the front end, so using Jest would make it a consistent test framework all across.\n  Setting up Authentication Though passport should have been a no-brainer for this, I decided to implement my own way of implementing auth using jwt tokens.\n  Setting up Authorization I am big fan of Ruby Authorization gems like CanCanCan and pundit. So I started looking for similar packages in npm. I landed up with CASL which is closest to what their more mature and powerful Ruby cousins could offer.\n  Setting up Logging library Here, winston was quite dominant, so I had used it. Not much of decision making here.\n  Setting up Swagger As swagger gives beautiful API documentation, I took the help of a library called tsoa which relies on few annotations/decorators in our controller code and the produces routes \u0026amp; generates the swagger.json\n  Setting up data validatons used joi for input data/screening validations. I liked the declarative approach it gives.\n  Setting up emails For this I used nodemailer for sending emails and email-templates for customizing the mail text.\n  Setting up CI Next, as I was using gitlab as my git repo, I thought of using gitlab\u0026rsquo;s built in CI. It was easy peasy stuff to setup up the automatic build and running of tests whenever a merge happens to the master branch.\n  Frontend Architecture Again, just like I had to make decisions before I started implementing the backend, I had a similar time this time with the frontend.\n  Choosing a frontend framework - Angular vs React vs Vue\nI was very tempted to use Angular as thats what I have been working on from beta version yup from 2016 June. But things changed when I started learning React to deliver a basic training on React just before I started with this app. I started liking the mental model that React brings to the table when designing a front end app. Though React is just a view library, the community was very mature and it offers a plethora of libraries to suppliment and make React a complete framework. I like Vue too as it has taken the best parts from both Angular and React but I just went with React as it was more mature.\n  Choosing a CSS Framework - Bootstrap Vs Material Design\nI just went for Material Design as I liked its principles of UI \u0026amp; UX. I like bootstrap too but just gave in to Material Design.\n  Choosing a Material Design React Component Library - React toolbox vs React Material-UI\nHere too, I had to make a choice of the component library that I had to use. Went in for react material-ui based on github popularity.\n  Choosing a state management solution - Mobx Vs Redux\nAs I know this will turn out into a large scale app, I wanted to go with Redux as it is opinionated and we could build more maintainable and more predictable apps. I have used ngRx in Angular projects too so I knew what Redux principles could bring to the table.\n  Code Infrastructure setup Now it was time to setup the skeleton for the front end architecture. I started with the authentication feature and also added CRUD actions for a feature.\n  TypeScript (TS) Just as I wanted to have strong typing in the backend, I wanted to have strong typing on the front end too. Though React goes well with Flow, I preferred TypeScript to go hand in hand with backend code. This will also promote sharing code across backend and front end if needed. I used the create-react-app typescript starter.\n  Setting up Redux I heavily borrowed lot of concepts/steps from this page for setting up redux with epics and also using TS.\n  Setting up Router I used react router v4 as the latest version (v4) has aligned itself to the mental model required when building React apps. Treating route itself as another component was a killer move.\n  Setting up Form Validation For form validation, I used formik. It creates a Higher Order Component (HoC) over our form component and exposes a validation schema API through Yup a light weight clone of Joi which I had used in the backend.\n  Setting up E2E Testing framework I had used cypress. Absolutely loved the developer experience and the speed and ease with which I could write test specs.\n  There goes my frontend and backend stack.. With the tech evolving at a rapid pace, I am sure this stack would be obselete more sooner than later. The important take away should be how we need to understand the fundamentals behind how things work as they may not change in a short span of time. But one thing we must remember is we being in the tech space must keep learning !!\n","permalink":"/blog/how-did-i-go-about-choosing-my-techstack-for-my-pet-project/","tags":["Tech stack","Backend","Frontend","Data Store"],"title":"How did I go about choosing my techstack for my side web app project?"},{"categories":null,"contents":"Recently, I had a peculiar incident while tuning a slow running SQL query which was logically doing the same thing but one was in Postgres (v11) and other in MySQL (v5.5). I just wanted to share my findings on how query planning/optimizing works in these 2 RDBMS within the context of my problem. Let me first give you the context of the problem in Postgres database. I was having 2 tables - A Client master table having information about client and a Client emails table having emails belonging to each client - 1 to Many relationship between Client and Email entities.\nBelow is the client master table schema.\nBelow is the client emails table schema.\nThe client_id in the client emails table is a Foreign Key to the id in the client master table.\nNow the ask was to generate all client domains who doesn\u0026rsquo;t have emails in the client emails table. The ask was pretty simple and so I started with this query - was intutive to me.\nSELECT * FROM CLIENT_MASTER WHERE ID NOT IN (SELECT DISTINCT CLIENT_ID FROM CLIENT_EMAILS) Here, I am using a subquery to fetch all the distinct client ids and then filtering out the records in the client master which doesn\u0026rsquo;t have the client ids. This query was very intuitive for me, so I used this. But it never gave me the result I was looking for and it was just running for an eternity\u0026hellip;\nI did a check on the record count. The client_master table had 1084701 (~ 1 million) records and 251929 (~ 0.25 million). It was quite huge but not worse to take such a long time to query them.\nNow, I did a quick EXPLAIN to see the execution plan of the query. I got the following result.\nFrom the above figure, what I could gather was the subquery would execute first and it will use the index that we have created based on the client_id. After that, the outer or parent query would be executed. This subquery plan looked good to me. But on checking the outer query plan, I found that it was going to do a sequential scan (going to check each and every row from the 1 million set) and apply the NOT in filter.\nI was quickly able to tweak this query by converting the NOT IN with a NOT EXISTS. The new query was like this.\nSELECT * FROM CLIENT_MASTER CM WHERE NOT EXISTS (SELECT * FROM CLIENT_EMAILS CE WHERE CE.client_id = cm.id) On doing an explain on this, I got the following output.\nNow, we could see that the result sets are fetched separately from the tables using the indices and the output are merged (Anti join as it was a NOT EXISTS). After running the query, I was able to get the results less than 3 seconds which was acceptable for the business use case.\nThe take away from this lesson was when using IN operator, the query planner was effectively getting converted into a WHERE CLAUSE with a OR condition for each of the 1 million record in the client_master table thus resulting in sequential scan. When we switches to EXIST operator, the query planner did a fetch from both tables using the indices and then did a merge to filter out the records.\nNow, lets get into the context of the problem that I faced in MySQLDB. I was having 2 tables here - A Campaigns table which has all details about campaigns sent to prospective clients and subscribers/client table having list of email. Again 1 to many relationship between campaign and subscribers.\nThe ask was to fetch all subscribers emails for a set of campaigns. So I used a subquery to first fetch the campaigns and then the subscriber details for this campaign. The query for this was -\nSELECT * from subscribers s where s.last_campaign in (SELECT id FROM `campaigns` c WHERE from_unixtime(c.sent) \u0026gt;=( CURDATE() - INTERVAL 10 DAY )) Again this query was taking an eternity. The record cound in the campaigns was only 280 but the count of total subscribers was ~ 1 million. There was also an index on last_campaign column,\nIf you look at the query above, it is similar to the one we had seen earlier in PG. On doing an explain on this, it showed that it was doing a sequential scan of 1 million records similar to doing a where with a OR condition for the 1 million records.\nAs I had seen the issue in this type of query in PG, I didn\u0026rsquo;t take much of time to rewrite this query using EXISTS. The modified query looked like this.\nSELECT * from subscribers as b where exists (select * from campaigns c where b.last_campaign = c.id and from_unixtime(c.sent) \u0026gt;=( CURDATE() - INTERVAL 10 DAY )) I was confident that this would work like a charm but to my dismay it didn\u0026rsquo;t. It kept running and running.. :( On doing an EXPLAIN, I found that the outer(parent) query was still doing a sequential scan and going through all the records in the table.\nI didn\u0026rsquo;t understand why was this happening till I stumbled upon this article and this. What I found was mysql does something called \u0026ldquo;outside to inside\u0026rdquo; when it comes to executing queries. It would first try to execute/evaluate the parent or the outer query and then use the evaluated value in the sub or inner query. So the final query looked like this.\nSELECT b.email, b.id, b.bounced, b.unsubscribed, b.bounce_soft, b.last_campaign from subscribers as b where b.last_campaign in (select id from (select id from campaigns c where from_unixtime(c.sent) \u0026gt;=( CURDATE() - INTERVAL 10 DAY )) as x) To make mySQL execute the inner or sub query first, the above query uses temporary or materialized views which would make the query planner to execute the inner query first and then use the results as a filter in the outer query.\nThis was one of my firsts in query optimization and it was fun learning and understanding how query planning and optimization works. This my no means a post explaining how query planning and optimization works, but shows how different RDBMS employ query planning and optimization techniques while executing a query. You could read this and this for more in-depth explanation from the official docs.\n","permalink":"/blog/postgres-mysql-query-optimization/","tags":["Postgres","mysql","sql query tuning"],"title":"Postgres Vs MySQL - My experience on query optimization working on both"},{"categories":null,"contents":"Just wanted to share and list down the tools that I use for my projects (web-development in particular).\nVS Code I have become a super fan of VS-Code, so so light weight and it has become the defacto Editor for any JS projects - frontend as well as backend. I use it for few of my python projects as well it works as a Charm (infact better than PyCharm.. :)\nYou have got to master the keyboard shortcut keys to make full leverage of any editor. Here is the link to VSCode keyboard cheat sheet for Mac and Windows\nDocker Absolutely love docker just for the simplicity it offers to setting up an complex environments all in my local box. I could not put everything here.. so working on a dedicated post for it.. Docker rocks !!\ntransfer.sh This is my go to file sharing space. I could quickly upload files from command line or simply drag and drop. I just get a shareable link and that\u0026rsquo;s it.. Ofcourse it supports encrpytion of our files in case you would need it. Try it out if you haven\u0026rsquo;t. Thanks to the dutchcoders for this !!\ngitlab - Issue Tracking/ CI / CD I have been using gitlab for most of my private projects and am very happy with it. It is my one stop store for Planning features/stories, bug tracking and the CI/CD capababilities it provides.\niterm I love working on the command line, but it slowly pulls me down when I have too many command lines open and I constantly have to switch amongst them. I found an instant liking with iterm as I was able to manage my command lines better, all in one single screen.\nTypeScript Nowadays, if I am working on a NodeJS or on building a web app, TypeScript is what I setup first. TypeScript has become an indespensable part of web development these days with official starter kits of Angular(by default), VueJS and React (coming up, though we have create-react-app starter for TypeScript)\n","permalink":"/blog/tools-that-make-me-productive/","tags":["productivity","tools","editor","lint","web-development"],"title":"Tools that make me productive - Web Development"},{"categories":null,"contents":"Ahh..I am sure you would have read umpteen number of blogs/articles comparing React, Angular (and Vue). Well this is going to be my version of it after having had a chance to work on both of them. I have developed a decent amount of projects in Angular and in React and kind of got a good grasp on both of these to write about their similarities/differences.\nFor starters, both of them are used to build SPAs and good at what they are supposed to. Lets' consider what are the elements that goes behind in building a modern day web app and lets try to compare and contrast based on those elements.\nElement # 1 - Building the User Interface Both Angular and React enforce the Component based design when it comes to building the UI. You basically see a Page as a tree of components. React was a pioneer in this and Angular (v2+) adopted it. Both are in line the native web component spec.\nVerdict Angular has a nose ahead here as the Angular (v6 and above) has started supporting Web Components which means any component developed using Angular(v6 and above) could be used as a stand alone Web component and could be used across any frameworks/library. So its 1-0 for Angular.\nElement # 2 - Fetching data from the backend To facilate fetching/posting data from the backend, Angular has built in modules (Http/HttpClient) which is bundled as a part of framework. In the React world, Axios is a popular package which could used for this. React also have a polyfill for native fetch call which comes bundled.\nVerdict There is nothing to choose here as both offer same capabilities.Its a tie with each getting a point. So its 2-1 Angular.\nElement # 3 - Handling Form Validation Form validations are a must in any client side application. Angular has build in Form Modules and provides 2 approaches - Template driven and Model driven. The form modules are built in as a part of the frameworks. React on the other hand leaves us in the dark here as it leaves it to the developer on how to implement it. I had a tough time in choosing the alternatives when it comes to Form validations in React until I stumbled upon Formik.\nVerdict Though I liked Formik very much and used it but just because I had to spend quite some time in choosing form validation libraries, I have to give this to Angular. So Angular leads 3-1.\nElement # 4 - Routing/Navigation Routing is an integral part of any web application. In Angular, you have a separate module (Router Module) to handle routing and all of this go into a separate route files. React doesn\u0026rsquo;t support routing out of the box but the most popular one is React Router. Prior to v4 of React Router, routes in react would need to be in separate(static) files but from v4 the Router got alligned with React\u0026rsquo;s component philosophy and Routing happens dynamically as the component renders as the Router is treated as a component. You could read more of this here.\nVerdict I have got nothing to choose amongst them so its a tie again. Its 4-2 for Angular.\nElement # 5 - State Management Well, what I have observed from my experience so far is most of developers who just have angular background, the term state management seems foreign to them. Though we have the concept of services in Angular which could be used to share state across components, this is something that is not built into the framework. React on the other hand is built on the core concept of state and how a state change could change the UI. This is one core thing that I think React got it really right.\nVerdict Though we have state management solutions like ngRx and mobx-angular which are inspired from their React world counterparts of Redux and mobx, I would like to give this hands down to React for imbibing the philosophy of UI as function of state. UI = f(state).That makes the scoreline 4-3 in favour of Angular.\nElement # 6 - Tooling The tooling for a framework/technology is one that gets you started and going with a framework/technology as quickly as possible. For Angular we have angular-cli and React has create-react-app. I am also a big fan of TypeScript as I like type checking and the static analysis it provides when building app. create-react-app has a starter for TypeScript too.\nVerdict I do not have anything here too as I found the experience similar when it comes to tooling for both React and Angular. Angular has a GUI wrapper for Angular cli called angular console. I am pretty much sure React also has something similar and would come up with one if not available still. Its a tie still. Scoreline is 5-4 Angular.\nElement # 7 - Server Side Rendering Server side rendering is also a key aspect when developing SPAs. You would want to have your landing/home page reach as fast as possible to your user and also have provision for SEO. Angular has Angular Universal which is again built into the framework for supporting SSR. React has built in support for SSR and for more advanced features we have the popular next-js.\nVerdict Again, I do not have anything to pick here, so another tie. Scoreline is 6-5 Angular.\nElement # 8 - Change Detection Change detection is the mechanism by which the framework makes the browser DOM in sync with application state/data automatically by reacting to events. React uses the concept of Virtual DOM to achieve this and Angular has its own Change Detection algorithm to make this work.\nVerdict Again, I do not have anything to pick here. The new change detection algorithm in Angular (2+) is a much much improved one over the Digest cycle implementation in AngularJs(v1.x). So its another tie. Scoreline is 7-6 Angular.\nElement # 9 - Programming Paradigm React in general tries to bring in few functional programming aspects when building the UI - Immutable states, pure functions (through render function \u0026amp; reducers in Redux). Angular favours a little object oriented style of programming through - classes, services. But the developer could mix and match the programming style that he/she likes and feels appropriate to the project needs.\nVerdict As I like the functional way of thinking and solving problems, I would give this to React so that makes the scoreline 7-7\nElement # 10 - Testing Finally, we get into how it is to write spec in Angular and React. Angular comes built in with Jasmine framework and its own testbed utilities. React comes with Jest as it framework and enzyme for rendering component.\nVerdict Both have their learning curves. Though I felt Jest+enzyme was easier to learn, I would consider them equals here. So the scoreline is 8-8.\nConclusion/Disclaimer The final scoreline gives you an indication on how Angular and React share lot in common. Again all these are based out of my little experience on working on these 2 lovely framework/library. I liked learning and working on both of them. Thanks to both the Angular and React developers community for helping us build awesome apps and helping the Web move forward.\nP.S: I am yet to get my hands dirty on Vue. As soon as I get an opportunity to work on Vue, I would update my experience with Vue too. :) Till then happy coding and learning !!\n","permalink":"/blog/angular-vs-react-my-take-on-it/","tags":["Angular","React"],"title":"Angular vs React"},{"categories":null,"contents":"Over the last 5 posts in this series, we have seen various ways of managing state in a Angular application. In this post, we would conclude by giving some pointers on which technique to choose based on the use cases.\nWhen to go for a Service based approach ? This is most easiest and the simplest approach to share/manage data across components/pages in your App. But this could quickly go haywire if not used in the right way and with proper encapsulation techniques.\n Use for a very small app (having 3 to 5 pages) Take into consideration the automatic change detection strategy that Angular employs and the cost of it in your App  When to go for an Observables based approach ? This approach is good if you first have a thorough understanding of how observables work and if you are going to build a small app which has lot of moving parts and state getting shared all over. Also if you are handling server push events through web sockets, hooking on to an observable and updating the DOM whenever you get data from the server, then observables would be a good choice.\n Use RxJS Observables when you first have a solid understanding on how Observables work Use for a very small to medium app (having 5 to 10 pages) Use OnPush Change Detection Strategy to optmize performance  When to go for a Mobx based approach ? Mobx is a great solution for state management that does lot of magic out of the box. With less code, you get more things done.\n Use Mobx when you have a small team of developers working on a large app with each of them understanding how Mobx works and all working on agreed coding guidelines. Mobx is more of a syntactic sugar for Observables based approach with Mobx library doing lot of heavy lifting. Use Mobx when you want to quickly get started with a state management solution Use OnPush Change Detection Strategy to optmize performance  When to go for a Redux based approach ?  Use Redux when you are going to develop a large scale app with a big team of developers. Use Redux when you do not mind writing more code to wire up things and Use OnPush Change Detection Strategy to optmize performance  I personally prefer Redux as it gives you the feel that you are managing state the right way and I am personally a big fan of the redux dev tools.\nThanks for reading this far !!!\n","permalink":"/blog/ui-state-management-part-6/","tags":["State Management","Redux","ngRx","Angular 2+","what to choose"],"title":"State Management in Angular 2+ apps - Part 6 - Conclusion"},{"categories":null,"contents":"In this post of our series in state management, we will be seeing how we can solve our state problem using a solution called Redux. We will be use the angular variant of Redux called ngRx.\nRedux has been inspired by elm and Flux. Elm is a pure functional programming language used for developing the front end of modern day web apps. Flux is a stage management solution. If this is first time you are hearing about Redux, please do watch these videos from the co-creator of Redux, Dan Abramov.\nRedux works on 3 core concepts, lets try to understand each of them in the context of our goodreads app.\nAction Actions are events that could update the state of your application. This could be user generated events like mouse clicks, keypress, scroll etc, network events like XHR request, response, websockets or timer events like setTimeout() and setInterval(). In the context of our app, the actions could be clicking on a good read tile, creating a new good read, deleting a good read etc..\nStore This is the place where the entire state of your application is maintained. Simply put it is one big JavaScript object (sometimes nested) which is going to represent the state across all pages in our application. In the context of our app, the store is just going to be a list(or array) of good reads.\nReducer Reducers are pure functions which takes 2 parameter namely the current state reference and the action type as input and returns a new state based on the action that had happened. In the context of our app, when we want to delete a good read, the current state would have original list of good reads but the reducer function would return a new state with the deleted item removed from the array as it was a delete action.\nEffects Though reducers are the place where most of your business logic may reside, but we cannot do any thing that may cause side effects inside them - which means we cannot do a network request to fetch some data from backend. But we cannot build apps which doesn\u0026rsquo;t have any network requests. This is where the effects come into play. It is the effects which handles codes that produces side effects and convert them to actions which gets sent to the reducer to yield a new state.\nI know it\u0026rsquo;s a bit vague now. Let\u0026rsquo;s look at some code to get a better picture. The code below uses ngRx version 2. Please note that the latest version of ngRx has moved into a mono repo and has a slightly different API. However, the concept remains the same.\nFirst, we would be listing down all the actions in our app that could possiblly change the state in a actions.ts file.\nstatic FETCH_ALL_READS = \u0026#39;FETCH_ALL_READS\u0026#39;; static FETCH_ALL_READS_SUCCESS = \u0026#39;FETCH_ALL_READS_SUCCESS\u0026#39;; static FETCH_ALL_READS_FAILURE = \u0026#39;FETCH_ALL_READS_FAILURE\u0026#39;; static MARK_AS_READ = \u0026#39;MARK_AS_READ\u0026#39;; static MARK_AS_READ_SUCCESS = \u0026#39;MARK_AS_READ_SUCCESS\u0026#39;; static MARK_AS_READ_FAILURE = \u0026#39;MARK_AS_READ_FAILURE\u0026#39;; static MARK_AS_UNREAD = \u0026#39;MARK_AS_UNREAD\u0026#39;; static MARK_AS_UNREAD_SUCCESS = \u0026#39;MARK_AS_UNREAD_SUCCESS\u0026#39;; static MARK_AS_UNREAD_FAILURE = \u0026#39;MARK_AS_UNREAD_FAILURE\u0026#39;; static ADD_NEW_READ = \u0026#39;ADD_NEW_READ\u0026#39;; static ADD_NEW_READ_SUCCESS = \u0026#39;ADD_NEW_READ_SUCCESS\u0026#39;; static ADD_NEW_READ_FAILURE = \u0026#39;ADD_NEW_READ_FAILURE\u0026#39;; static EDIT_READ = \u0026#39;EDIT_READ\u0026#39;; static EDIT_READ_SUCCESS = \u0026#39;EDIT_READ_SUCCESS\u0026#39;; static EDIT_READ_FAILURE = \u0026#39;EDIT_READ_FAILURE\u0026#39;; static DELETE_READ = \u0026#39;DELETE_READ\u0026#39;; static DELETE_READ_SUCCESS = \u0026#39;DELETE_READ_SUCCESS\u0026#39;; static DELETE_READ_FAILURE = \u0026#39;DELETE_READ_FAILURE\u0026#39;; Then we define the state of our application and we also initialize it.\nexport interface GoodReadState { readsCollection: GoodRead[]; operationMsg: string; } export const initialState: GoodReadState = { readsCollection: null, operationMsg: null } Then we define our reducer which is just a pure function and returns a new state, given the current state and an action. I have used the lodash cloneDeep function to create a new instance of the state and update it. I could have also used ES6 features to achieve the same thing. Remember pure functions should not alter the input passed and also should not cause any side effects.\nexport function reducer(state: AppState = initialState, { type, payload }: Action) { let newState: AppState; let findIndexToReplace; switch (type) { case GoodReadActions.FETCH_ALL_READS_SUCCESS: newState = _.cloneDeep(state); newState.readsCollection = payload; break; case GoodReadActions.FETCH_ALL_READS_FAILURE: newState = state; newState.operationMsg = \u0026#39;Fetching reads from backend failed\u0026#39;; break; case GoodReadActions.LOAD_NEW_READ: newState = state; newState.selectedRead = null; break; case GoodReadActions.ADD_NEW_READ_SUCCESS: newState = _.cloneDeep(state); newState.readsCollection.push(payload); newState.selectedRead = null; break; case GoodReadActions.LOAD_READ: newState = state; newState.selectedRead = _.cloneDeep(payload); break; case GoodReadActions.EDIT_READ_SUCCESS: newState = _.cloneDeep(state); findIndexToReplace = _.findIndex(newState.readsCollection, (read) =\u0026gt; read.id === payload.id); newState.readsCollection[findIndexToReplace] = payload; break; case GoodReadActions.MARK_AS_READ_SUCCESS: newState = _.cloneDeep(state); findIndexToReplace = _.findIndex(newState.readsCollection, (read) =\u0026gt; read.id === payload.id); newState.readsCollection[findIndexToReplace] = payload; break; case GoodReadActions.MARK_AS_UNREAD_SUCCESS: newState = _.cloneDeep(state); findIndexToReplace = _.findIndex(newState.readsCollection, (read) =\u0026gt; read.id === payload.id); newState.readsCollection[findIndexToReplace] = payload; break; default: newState = state; } return newState; } And finally to handle our network request, we need to wire up the effects part. The effects are going to intercept the actions that needs a call to backend, does the actual call through a service and finally dispatches an action with the resultant data or server response.\n@Injectable() export class GoodReadEffects { constructor(private action$: Actions, private backendService: BackendService, private goodReadActions: GoodReadActions) { } @Effect() fetchAllReads$ = this.action$ .ofType(GoodReadActions.FETCH_ALL_READS) .switchMapTo(this.backendService.fetchAllReads()) .map((reads: GoodRead[]) =\u0026gt; this.goodReadActions.fetchAllReadsSuccess(reads)); @Effect() markItemAsRead$ = this.action$ .ofType(GoodReadActions.MARK_AS_READ) .switchMap((action: Action) =\u0026gt; this.backendService.markItem(action.payload, true)) .map((read: GoodRead) =\u0026gt; this.goodReadActions.markAsReadSuccess(read)); @Effect() markItemAsUnRead$ = this.action$ .ofType(GoodReadActions.MARK_AS_UNREAD) .switchMap((action: Action) =\u0026gt; this.backendService.markItem(action.payload, false)) .map((read: GoodRead) =\u0026gt; this.goodReadActions.markAsUnreadSuccess(read)); @Effect() editRead$ = this.action$ .ofType(GoodReadActions.EDIT_READ) .switchMap((action: Action) =\u0026gt; this.backendService.editItem(action.payload)) .map((read: GoodRead) =\u0026gt; this.goodReadActions.editReadSuccess(read)); @Effect() addRead$ = this.action$ .ofType(GoodReadActions.ADD_NEW_READ) .switchMap((action: Action) =\u0026gt; this.backendService.addNewRead(action.payload)) .map((read: GoodRead) =\u0026gt; this.goodReadActions.addNewReadSuccess(read)); } Now that we have tough part out, lets look at how we are going to utilize this redux setup. Let\u0026rsquo;s assume the user clicks on the read checkbox. Below is the code in the home.component.ts that handles this functionality. It just simply dispatches an action to mark a particular item as read/not read. This would be handled in the reducer and\ntoggleItemRead(id: number, isRead: boolean) { if (isRead) { this.store.dispatch(this.goodReadActions.markAsRead(id)) } else { this.store.dispatch(this.goodReadActions.markAsUnread(id)) } } Now that we have seen how to dispatch/trigger the action through the store, we need to know how the view/DOM gets updated once there is a change in the state. For this we hook up an observable to the store. Here below is the code in home.component.ts where the allReads$ variable is hooked on to the state\u0026rsquo;s readCollection property.\nngOnInit() { // this.allReads$ = this.store.select(selectAllReads); this.allReads$ = this.store.select((state: AppState) =\u0026gt; state.readsCollection) } Any changes to the readCollection would trigger a re-render to the DOM as shown below.\n\u0026lt;div class=\u0026#34;col-sm-4\u0026#34; *ngFor=\u0026#34;let readItem of allReads$ | async\u0026#34;\u0026gt; \u0026lt;app-read-card [readItem]=\u0026#34;readItem\u0026#34; (checkEvent)=\u0026#34;toggleItemRead(readItem.id, !readItem.isRead)\u0026#34; (deleteEvent)=\u0026#34;deleteItem(readItem.id)\u0026#34; (editEvent)=\u0026#34;editItem(readItem)\u0026#34;\u0026gt;\u0026lt;/app-read-card\u0026gt; \u0026lt;/div\u0026gt; This is how we setup Redux to our Angular project. We have done lot of things/wiring up to get it working. To summarize, we did the following:\n Created a set of actions which are going to modify the state Created an interface for the store Created an reducer function to handle state changes on various actions Created a set of effects to handle side effects and transform them to actions Hooked up the store in the components to observe for state changes and also to trigger/dispatch actions based on various events  You could find the complete source code for the Redux implementation here.\nSee you soon in the last post on this series where we conclude on what state management solution to choose based on the needs !! Till then Happy learning.\n","permalink":"/blog/ui-state-management-part-5/","tags":["State Management","Redux","ngRx","Angular 2+"],"title":"State Management in Angular 2+ apps - Part 5"},{"categories":null,"contents":"In part-1 of this series, we got to know what state is and the need to have a state management solution especially in the case of a large web app. In this post, we will be seeing how we can solve our shared state problem using a solution called Mobx.\nMobx is a non-opionated state management technique which again uses concepts of observable that we had seen in part-3. You could say mobx is a wrapper built on top of observables and does lot of magic under the hood. I won\u0026rsquo;t go in depth on how and what of mobx. There are lots of good tutorials, blogs on this. You could check out the official documention of mobx here.\nBefore we see how to implement mobx in our good reads app, lets try to understand few terms which are the building blocks of mobx and correlate them to our app.\nStore Store is simply a object thats going to hold our state. So in our app, this would just hold the list of books/blogs.\nActions Actions refer to any event that could change the state of our app. In the context our app, actions could be adding a new read,deleting a read or marking a book/blog as read.\nDerivations Derivations are values that could be computed or derived from a state. In our app, the total read counter could be derived from the reads collection instead of storing it as a separate entity in the state.\nReactions Reactions are there to handle your side effects like doing a network call, DOM updates.\nMobx is built on the following principle\n Reacting to state changes rather than acting on state changes\n To implement this, it makes heavy use of observables and to make it easy for the developers, it has done lot of heavy lifting. To understand and read more on this, please refer to this blog from the creator of Mobx, Michel Westrate.\nOkay. Its time now to see Mobx in action.We would be using a package called mobx-angular which is an angular wrapper on the mobx.\nThe first thing we are going to do is to create the store. Our store is going to hold the reads collection. actionStatus will be used to store the status of a network request.\n@Injectable() export class GoodReadStore { @observable reads: GoodRead[] = []; @observable actionStatus: networkRequestState; constructor(private backendService: BackendService) {} Next is to handle our actions. For this we would be creating different methods in our Store corresponding to different actions that could be performed in our app.\n@action addNewGoodRead(read: GoodRead) { this.actionStatus = networkRequestState.Pending; this.backendService.addNewRead(read).subscribe( readRsp =\u0026gt; { this.reads = [...this.reads, readRsp]; this.actionStatus = networkRequestState.Success; }, err =\u0026gt; { console.log(err); this.actionStatus = networkRequestState.Failure; } ); } The code above handles adding a new good read in our app. @action is a decorator that indicates this is an mobx action where state mutation may happen. We are just invoking the backend service and creating a new collection with the newly added item.\nNow, it time to see how to implement a derivation. Here in our app, it would be the read counter.\n@computed get readsCounter(): number { console.log(`Reading counter @ ${Date.now()}`); return this.reads.filter(read =\u0026gt; read.isRead).length; } We just use the @computed decorator to make the readsCounter a derivation.\nAlso if you have noticed, the code that interacts with the service would just simply do one job of interacting with the backend APIs, thus adhering to the Single Responsibility Principle.\naddNewRead(read: GoodRead) { const url = `${this.baseAPIRURL}/create` return this.http.post\u0026lt;GoodRead\u0026gt;(url, read); } Now that we have setup the mobx infra, lets see how to use them from the components. Lets\u0026rsquo;s say the user deletes a read item. All we need to do is call the delete action defined in the mobx store. The below snippet is from home.component.\ndeleteItem(id: number) { this.store.deleteRead(id); } Now, lets see what are the changes in home.component.html.\n\u0026lt;div class=\u0026#34;container\u0026#34; *mobxAutorun\u0026gt; \u0026lt;div class=\u0026#34;create\u0026#34;\u0026gt; \u0026lt;a routerLink=\u0026#34;/new\u0026#34; class=\u0026#34;btn btn-success\u0026#34;\u0026gt;+New\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-sm-4\u0026#34; *ngFor=\u0026#34;let readItem of store.reads\u0026#34;\u0026gt; \u0026lt;app-read-card [readItem]=\u0026#34;readItem\u0026#34; (checkEvent)=\u0026#34;toggleItemRead(readItem.id, !readItem.isRead)\u0026#34; (deleteEvent)=\u0026#34;deleteItem(readItem.id)\u0026#34; (editEvent)=\u0026#34;editItem(readItem)\u0026#34;\u0026gt;\u0026lt;/app-read-card\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; We now are directly reading the store reads collection. Note that there is no | async, instead we are using *mobxAutorun directive which automatically takes care of rerendering the list if there are any changes to state. This is the magic that Mobx does out of the box for us.\nWe can also mark the home component\u0026rsquo;s change detection strategy to OnPush as Mobx would ensure that it would trigger the change detection whenever it sees there is a change in a state that the component would be interested in. This alleviates the developers from the responsbility of making apps more performant.\nComponent({ selector: \u0026#39;app-home\u0026#39;, templateUrl: \u0026#39;./home.component.html\u0026#39;, styleUrls: [\u0026#39;./home.component.css\u0026#39;], changeDetection: ChangeDetectionStrategy.OnPush }) That\u0026rsquo;s all we need to do for Mobx implementation. The code is lot more concise, concerns separated and easy to code with lot of magic happening under the hood through Mobx.\nTo summarize, we did the following:\n Created a store to hold our state Created actions which updates the state Created derivations Called the actions methods through the store from the Components Added the mobxAutorun directive to the component view (html) to automatically detect changes and rerender the DOM  You could find the complete source code for the Mobx implementation here.\nMobx implmentation has so far being the most easy and consise. With lot less code, we get lot of value. But sometimes this could also backfire, if you do not understand how it all works under the hood. So please make it a point to read more about how Mobx works in this post.\nSee you soon in the next post on Redux !! Till then Happy learning.\n","permalink":"/blog/ui-state-management-part-4/","tags":["State Management","Mobx","Change Detection Strategy","Angular 2+"],"title":"State Management in Angular 2+ apps - Part 4"},{"categories":null,"contents":"In part-1 of this series, we got to know what state is and the need to have a state management solution especially in the case of a large web app. In this post, we will be seeing how we can solve our shared state problem using Observables. We will also see how we can overcome the pitfalls of the Angular services approach discussed in part-2 of this series.\nObservables is something that I have seen which unsettles developers. It does take some time to settle in especially people coming from a imperative background. We will be using RxJS, a library that implements observables and a load of other operators. Warning - RxJS again has a steep learning curve. You must give it time to sink in if you are new to this.\nWhat/Why Observables ? Let me try to explain this in the context of state management. Observables provides a mechanism to link a piece of data or state with a view or component that is interested in it by employing the Observer Design Pattern. It simply connects the data or a subject to a list of Components or Observers. RxJS is the library which has the implementation of Observables. Infact, Angular has RxJS as a part of its dependency as the framework heavily uses these concepts and tonns of other utitlities in the RxJS library. If you need a detailed explaination, please do read this wonderful blog by the author of RxJS 5 BenLesh. One other misunderstanding of Observables is that its used for your async events like XHR, setTimeout etc. As clarified in BenLesh\u0026rsquo;s blog post, Observables can be sync or async and it depends on the data source type. If the data has to be fetched from a backend, the observable would turn out to be async or if the data source is just an array stored in your service, it would be sync in nature.\nHow are we going to implement Observables ? Now that we got the fundas out, lets look at how Observables and the RxJS library are going to help us manage our state. Talking in terms of the Observer pattern, our list of reads is going to be the subject which our home component and navbar component would be interested in. So we are going to wrap our shared state which is the reads collection inside a subject using RxJS BehaviorSubject class.\nprivate readsSubject: BehaviorSubject\u0026lt;GoodRead[]\u0026gt;; public allReads$: Observable\u0026lt;GoodRead[]\u0026gt;; public readsCounter$: Observable\u0026lt;number\u0026gt;; We are declaring 3 variable here. readsSubject which is going to hold our reads collections and hence the term subject. allReads$ is an observable which the home component would be interested in and readsCounter$ is other obserable which the navbar component would need to be hooked into. We are basically modelling our state management problem to fit into solution given by the Observer pattern. BTW, prefixing a variable with $ is just a convention to indicate it is an Observable type.\nFor the question on why we are using a BehaviorSubject instead of Subject, please look here.\nOne more point that you can notice is, we have declared our subject as private and observables as public. This is to take advantage of the encapsulation features that typescript gives to inadvertently get access to the subject outside the service and updating it. You may also wonder, how we are going tie up the observables from the subject. Well, here we go. We do that in the contructor.\nconstructor(private http: HttpClient) { this.readsSubject = new BehaviorSubject([]); this.allReads$ = this.readsSubject.asObservable(); this.readsCounter$ = this.allReads$.map((arr: GoodRead[]) =\u0026gt; arr.filter(read =\u0026gt; read.isRead).length); } There is an asObservable() api exposed on the Subject which returns an observable hooked on to that subject. Any one interested in subscribing to this subject, could do so by subscribing to this observable. We could also directly subscribe to the Subject but that would mean exposing the Subject out to the consumers which violates the encapsulation principle. For the readCounter$ observable, we would just need to send out the number of good reads. Observables have a load of operators just like we have in underscore or lodash with which we could get the reads count out. It is similar to what we did in the Angular services approach.\nNow in our components, all we need to do is to subscribe on these observables using Angular async pipe.\n\u0026lt;div class=\u0026#34;col-sm-4\u0026#34; *ngFor=\u0026#34;let readItem of backendService.allReads$ | async\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;badge badge-primary badge-pill\u0026#34;\u0026gt;{{backendService.readsCounter$ | async}}\u0026lt;/span\u0026gt; You would be interested to know how the subject is getting updated, for instance lets say when we mark an item as read. Below it the code for that.\nmarkItem(id: number, isRead: boolean) { const url = `${this.baseAPIRURL}/update/${id}`; return this.http.patch\u0026lt;GoodRead\u0026gt;(url, { isRead }) .do(rsp =\u0026gt; { const allReads = this.readsSubject.getValue(); const itemToBeUpdated = allReads.find(read =\u0026gt; read.id === id); itemToBeUpdated.isRead = isRead; this.readsSubject.next(allReads); }) } We send a http PATCH request to the backend and once we get the response, we get the currently stored data in the subject using getValue(), then update the item that is marked and finally publish the updated array using next(). When we do a next on a subject, it triggers the call back function passed in the subscribe api of all the observables interested in this subject. You could see below in the home component, this markItem() function is being subscribed and you would see the log whenenver you check or uncheck an item.\ntoggleItemRead(id: number, isRead: boolean) { this.subscriptions = this.backendService.markItem(id, isRead) .subscribe(() =\u0026gt; { console.log(`Item marked as ${isRead ? \u0026#39;read\u0026#39; : \u0026#39;unread\u0026#39;}`); }); } Well, if you are getting to know about Observables/RxJS for the first time, this may feel little overwhelming initially, but once you get your head around it, you would really appreciate it. It took me good part of 3 months to get a basic understanding of it all works and am still continuing to learn. So just be patient\u0026hellip; By the looks of it, Observable could soon land up as a part of the browser API soon. Check out this.\nOk, coming back to our state management problem. Lets see how this approach eliminates the pitfalls of Angular Services approach discussed in part-2.\nNo longer have to rely on Angular Change Detection Now, we would no longer need to depend on Angular\u0026rsquo;s Change Detection mechanism to check and rerender the DOM whenever there is a change in the reference or value of variable referenced in the html. As we have implemented the Observer Pattern here through Observables/Subject, we could be rest assured that the view would get the updates whenever there is a change in actual state, here in our case the reads collection. We could now take advantage of this and make the read-card component\u0026rsquo;s change detection strategy to be OnPush.\n@Component({ selector: \u0026#39;app-read-card\u0026#39;, templateUrl: \u0026#39;./read-card.component.html\u0026#39;, styleUrls: [\u0026#39;./read-card.component.css\u0026#39;], changeDetection: ChangeDetectionStrategy.OnPush }) This will notify Angular not to check this component\u0026rsquo;s variables for any changes when running the Change detection algorithm. For a more in depth post on how Change Detection works, please refer here.\nThis is big plus especially for making apps more performant as we are avoding costly checks by resorting to OnPush change detection strategy. A component marked with OnPush get rerendered only when there is a change in its inputs (reference or value). So we have to ensure that the refernce or value gets changed whenever we do an update on the reads data. For instance, while marking an item to be read or unread, it is important that we update the reads subject with a new object having the updated data instead of updating the data in place. Notice below that we are replacing the object to the updated in the array with a new object coming as the response from the backend.\nmarkItem(id: number, isRead: boolean) { const url = `${this.baseAPIRURL}/update/${id}`; return this.http.patch\u0026lt;GoodRead\u0026gt;(url, { isRead }) .do(rsp =\u0026gt; { const allReads = this.readsSubject.getValue(); const indexOfItemToBeUpdated = allReads.findIndex(read =\u0026gt; read.id === id); allReads[indexOfItemToBeUpdated] = rsp; this.readsSubject.next(allReads); }) } These are some of things that we should be extra cautious when dealing with OnPush Change Detection. The onus falls on the developers to implement things in such a way, the Change Detection works properly and value gets updated in the DOM. This is where libraries like immutable.js could help which implements Immutable amd Persitent Data structures which would always yield a new value on whatever operations you perform on the value.\nWith that we come to end of this part. Hope you got an essence of how RxJS Subjects and Observables work, how Angular Change Detection works and also how using immutable collection would help us in building more predictive apps. The source code of the app implementing this strategy could be found here.\n","permalink":"/blog/ui-state-management-part-3/","tags":["State Management","RxJS","Observables","Change Detection Strategy","Angular 2+"],"title":"State Management in Angular 2+ apps - Part 3"},{"categories":null,"contents":"In part-1 of this series, we got to know what state is and the need to have a state management solution especially in the case of a large web app. In this post, we will be seeing how we can solve our shared state problem using plain Angular services.\nIn the last post we identified that the good reads collection is the data that is being shared by the home component and the navbar component. So we know that when we need to share data between components, we just need to introduce a service, place the data in the service and inject the service in components that needs it. This is the approach which we would have taken if we are working in AngularJS(Angular 1.x) also this is precisely what we will be doing here.\n@Injectable() export class BackendService { baseAPIRURL = \u0026#39;http://localhost:3000/api\u0026#39;; reads: GoodRead[]; subs: Subscription; constructor(private http: HttpClient) { this.reads = []; } We have a BackendService which is going to hold our collection in the reads variable. GoodRead is our model class which is going to have all attributes of blog/book like title, description, catergory etc.\nexport class GoodRead { constructor(public title: string, public description: string, public category: string, public url: string, public isRead: boolean, public id?: number) { } } The service is going to talk with the backend and get the data and store it back in the reads variable.\nfetchAllReads() { const url = `${this.baseAPIRURL}/index`; this.subs = this.http.get\u0026lt;GoodRead[]\u0026gt;(url) .subscribe(data =\u0026gt; this.reads = data); } And we would be exposing this reads array using a getter.\nget allReads(): GoodRead[] { return this.reads; } Now in our home.component.ts, we would inject this service and in the home.component.html, we would be using this the service in our html to render the items in the DOM.\n\u0026lt;div class=\u0026#34;col-sm-4\u0026#34; *ngFor=\u0026#34;let readItem of backendService.allReads\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; Now to display the number of items read, we expose a getter in the BackendService. I will come to the console.log statement in just a while.\nget allReadsCount(): number { console.log(`Reading counter at ${Date.now()}`); return this.reads.filter(read =\u0026gt; read.isRead).length; } We would be using this method in the navbar component to display the number of reads.\n\u0026lt;ul class=\u0026#34;nav\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; Read \u0026lt;span class=\u0026#34;badge badge-primary badge-pill\u0026#34;\u0026gt;{{backendService.allReadsCount}}\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; Please look here for the complete code base.\nWe have achieved what we wanted but is this the best solution. This offcourse is the simplest and more importantly it works!! But it has its own pitfalls. Lets see what are those.\nPitfall # 1 - Relying on Angular\u0026rsquo;s Change Detection Here, you have to understand how Angular magically updates the DOM whenever the reads variable in the BackendService gets updated. This happens through a change detection mechanism that gets triggered on every event that happens and Angular checks all the variables referenced in the HTML to see if its reference or value has changed. If there is a change, Angular rerenders the correspoding part of the DOM.\nThe following line in the navbar.component.html is supposed to show the value of the total number of read items. I have added a console log inside the allReadCount getter, just to show the number of times the getter function is called.\n\u0026lt;span class=\u0026#34;badge badge-primary badge-pill\u0026#34;\u0026gt;{{backendService.allReadsCount}}\u0026lt;/span\u0026gt; You could observe from the below snapshot that for every event that happens in the UI, keypress, mouse scroll etc, Angular triggers the change detection mechanism to check any value has changed. This is a costly operation and for large scale apps with lot of component, this will cause performance issues. So this also help us understand how Angular does this magic of updating the DOM when we change anything in our state in the service.\nThe read counter gets called for every keypress that I do in the form which is not required.\nPitfall # 2 - Exposing the state data If you notice, although we have a getter method to fetch all the reads from the BackendService, we are exposing the entire array out to the public. Any component, service which has access to BackendService could potentially alter/update the array. Although we can make it private, we still need to have a getter which would return the reference to the array thereby exposing the array outside and breaking the encapsulation. This would make trouble shooting and would create a maintenance nightmare when you don\u0026rsquo;t know which component is consuming and updating the array inadvertently when the app gets bigger.\nSummary This approach of managing state through Angular Services turns out to be a anti-pattern. Please do not use this technique. In the next post, we would be seeing a better approach using Observables.\n","permalink":"/blog/ui-state-management-part-2/","tags":["State Management","Services","Change Detection","Angular 2+"],"title":"State Management in Angular 2+ apps - Part 2"},{"categories":null,"contents":"This is part-1 of the blog series where I would be trying to explain state management in Angular 2+ app using different strategies along with their pros and cons.\nIn this part, I will try to demystify the term state, how to identify state and why do we need to manage state. So lets get started\u0026hellip;\nHow do you define state or what is state of an app ? I have seen junior developers who just have Angular(1 \u0026amp; 2+) background struggle to answer this question as they haven\u0026rsquo;t encountered the term state while building apps. This is where getting to know different alternative like React or Vue helps. React is built on the philosophy of UI is a function of state. Please read this to understand more about the philosophy.\nComing back to the question, a state as per the definition represent an app\u0026rsquo;s data at a given point of time. Programatically speaking, a state is nothing but the variables - objects, number, arrays that you use in your JS code to represent the data to be displayed in the UI. So now you can relate to the UI=f(state) principle which implies UI changes as state changes.\nLets take a sample app and try to decipher the state based on the above lines. Incidentally, we would be also using same app to apply different state management strategies. It is a simple CRUD app which has a collection of my good reads (books or blogs) and you could manage it meaning - add/edit/delete. Also if you notice there is counter which indicates the number of books/blogs that I have read. So thats about the app\u0026rsquo;s functionality.\nBefore we try to identify the state, lets look at how I have broken the page into components.\nHome Component Below is the home component.It hosts the list of reads. Basically its the container.\nCard Component Below is the one of the card component. These are presentational components which takes inputs and emits events as outputs whenever there is an event like marking the checkbox, deleting etc.\nThese are also called as dumb components as they do not do anything apart from I/O and its responsibility of the parent component containing or hosting these dumb components to handle events and react to them. So the home component hosting these components is called a Smart component as it knows and decides what to do on getting an event. Dumb component promotes reusability as they could be fitted in any other component or page with a similar requirement.\nNavbar Component Next is the navbar component. It\u0026rsquo;s our header for all our pages and has a counter which tracks the book/blogs that I have read. It has to get incremented whenever I mark an item as read and decremented whenever I uncheck the checkbox.\nForm Component And finally we have the form component, which would be used to add new blog/book or edit an exiting item.\nTo help us decipher the state of the app, lets try to understand the different kinds of state.\nLocal State Local State refers to the set of data stored in your variables that pertains to just the component, meaning the set of data that are not exposed or shared by some other components. An example could the state in the form component when you are creating or editing a new item. You would be need to store the form data as local variables to do validation before saving it.\nShared State Shared state refers to the set of data that is being shared by more than 1 component meaning 1 or more component is directly or indirectly being dependent on the data.\nSo in our app, the shared state would be the list of items as this is being shared by the home component and also the navbar component which tracks the number of reads.\nNow the next question, why do we need to manage state ? Okay thats a very valid question. Managing local state is easy as it is just going to reside within a single component, so we don\u0026rsquo;t really have to care about managing it as we know whatever changes that happens to the data would only affect the component and nothing else. But when it comes to shared state, the same argument would not hold good. As the state is being shared, we would need to find a way to manage this sharing. Picture the following :\nThe above picture is a Venn diagram representation of apps where the circles represent components in the app. The intersection points represent the shared states amongst the components. As you could see, larger the app, more the components, more the intersections and more is the complexity of maintaining the state. Hence we need a state management solution !!!\nThere you go, that brings to us the end of this post. Hope you got a bit of understanding on state and what is the need to manage them. In the next set of posts, we will be seeing each one of the different technique in detail. The entire source code for this blog series is available in github. You could find it here.\n Managing state using Angular services - Part 2 Managing state using RxJS (Subjects n Observables) - Part 3 Managing state using Mobx via angular-mobx - Part 4 Managing state using Redux via ngRx - Part 5  ","permalink":"/blog/ui-state-management-part-1/","tags":["State Management","RxJS","Mobx","Redux","ngRx","Angular 2+"],"title":"State Management in Angular 2+ apps - Part 1"},{"categories":null,"contents":"This is my collection of A-to-Z terms that one should know if they are into serious javascript programming.\nAsync/Await Async and Await are new features introduced in the language to make asynchronous code block look synchronous and more importantly make it more readable.\nBrendan Eich Brendan Eich is the creator of JavaScript. He created the language in a matter of 10 days when working for Netscape Navigator. Due credit to be given to him for creating this language.\nClosure/Callbacks Closures is one key aspect of the language which makes is support functional programming concepts and also very centric to its event driven approach to running code.\nCallbacks are functions passed as parameters to other functions more often to support asynchronous code execution.\nDynamically Typed JavaScript is a dynamically typed language - an advantage as well as a disadvantage\nECMAScript/EventLoop JavaScript\u0026rsquo;s official name is ECMAScript.\nIf you have to understand about eventloop, then you have to watch this talk.\nFunctional JavaScript supports functional style of programming. If you want to learn more about this, you could read here.\nGenerators Generators are functions that could save context across re-entrances.\nH \u0026ndash;To be Added\u0026ndash;\nIIFE IIFE is a short form of immediately invoked function expression. These are functions which get invoked along with their definition.\nJSON JSON is the defacto standard for message format used in communications over the Web.\nK \u0026ndash;To be Added\u0026ndash;\nL \u0026ndash;To be Added\u0026ndash;\nMDN MDN is the official source of truth for all your JavaScript reference.\nNode NodeJS is a JavaScript runtime which is built on top of Chrome\u0026rsquo;s V8 JavaScript Engine.\nObjects Objects are the fundamental building blocks of any JavaScript program. It gives us the equivalence of Classes/Objects present in a Object Oriented Language like Java, C++.\nPrototypal Inheritance JavaScript supports inheritance through prototype chaining.\nQ \u0026ndash;To be Added\u0026ndash;\nR \u0026ndash;To be Added\u0026ndash;\nService Worker Service Workers can be thought of as proxies to your backend and enables great user experiences like offline capability, optimistic loading of resources etc.\nT \u0026ndash;To be Added\u0026ndash;\nU \u0026ndash;To be Added\u0026ndash;\nV \u0026ndash;To be Added\u0026ndash;\nWeb Assembly/Web Worker Web Assembly is mechanism or a provision by which browsers can execute assembly/compiled code. This opens up a whole lot of new things that could possible in a web app escpecially performance intrinsic ones like gaming, image processing etc all happening inside a browser.\nWeb Workers are means to achieve multi threading in browsers where we could do execute JS in parallel without affecting the main thread.\nX \u0026ndash;To be Added\u0026ndash;\nY \u0026ndash;To be Added\u0026ndash;\nZ \u0026ndash;To be Added\u0026ndash;\n Would love to hear your feedback and suggestions for the To Be Added letters and also any terms that I have missed out\u0026hellip;\n","permalink":"/blog/a-z-of-javascript/","tags":["JavaScript","terminologies"],"title":"A-Z of JavaScript"},{"categories":null,"contents":"Whenever we learn about some topics or if you are teaching someone, I always felt analogies from day to day life makes a greater impact to a person\u0026rsquo;s understanding. This post is my take on analogy of technologies/terminologies/people involved in front end development.\nI am going to compare building a website to building a house where :\nHTML(HyperText Markup Language) would be the raw building materials namely bricks, steels, cement. These help you in building the skeleton or structure of your house. Similarly, you build the structure of your page using HTML elements like div, span, p, header, section etc.\nCSS (Cascading Style Sheets) would be the blue print which defines the layout of your house. It defines the size of your rooms, wall colors, window sizes, position of doors/windows according to your needs. In the context of web development, you use CSS to define your page layout, styling - font to be user, color etc\nJavaScript would be the electricity/power needed to make your house dynamic and make things function in your house. Example, if you press a light switch, it should turn on/off the light. You could live in a house without power supply just like you can have a website with javascript disabled or not at all. But lot of things may not function in your house/website. In modern web, JavaScript is a must have just like you need electricity to power up your homes.\nUI or User Interface is the portion of the house which anyone can see and interact with. It gives the perspective of how your house is going to look like to the person who sees it. Similarly, in the context of web or any front end interface, it would mean the views/pages that the user can see and interact when he/she browses a website/app.\nUX or User Experience would be how good a resident in the house would feel about staying in it. Do you have good ventilation, aeration ? How accessible are things ? Basically, it tells you the comfort level of the house. Similarly in the web development context, this is simply how good the user feels about your site. Its basically what are all the things you would do to make the user to have a great experience in visiting your website - pleasing color, intuitive designs, lesser mouse clicks etc..\nWeb Components in a house construction analogy would be a set of ready to use materials which you could just get it from a store/shop and use it while constructing your house. This could be as simple as your doors, windows, window frames etc to as big as a ready to use, already built rooms. Similary in a front end development analogy, web components are already built, independent set of reusable components which you could just import into your web page and use it. It doesn\u0026rsquo;t depend on any framework and its it totally interopable as it\u0026rsquo;s purely built of native browser APIs.\nFront End Frameworks would comprise of the tools that would aid in the faster construction of a house and at the same time ensure efficient use of materials and resources. You could think of them as a set of standard guidelines to construct a house or could think them as regulatory or standards authority who set out the guidelines on how a building should be built. Similary, a framework in the context of front end development aids in reducing the boiler plate code required to get you started and also to help you in following certain guidelines while building a web page/site/app.\nUI/UX Designer in the context of house construction could be thought of interior/exterior decorators whose primary responsibility is to facelift the look and feel of the house and make staying a pleasure for the resident. In the web development context, a UI/UX designed would typically design the layout of the web page, choose the fonts to be used, the coloring etc according to the end-user/business needs.\nUI Developers would be the persons actually doing the house construction work - masons, painters. They would start from the foundations laying brick by brick and building the house group up following the architecture plan proposed by the interior designer. Similarly, a UI developer would build a webpage following the layout and specifications laid out by the UI designer. A UI developer should be strong in HTML,CSS.\nUI Engineers would be the persons who would be involved in the engineering works inside the house. These could be your electricians, plumbers, carpenters. Similarly, UI Engineers would be developers who apart from having a basic knowledge in HTML, CSS should have an strong knowledge on JavaScript and also preferably knowledge on any modern front end framework.\n","permalink":"/blog/front-end-analogies/","tags":["web-development","analogy","front-end-basics"],"title":"Front End development Analogy"},{"categories":null,"contents":"In this post, I would be talking about the git workflow that could be adopted when you are working on a project all alone and also when you are working in a team. Before we start, lets try to understand what is Git and why it is becoming the leader in Version control/SCM (Software Configuration Management).\nWhat is Git ? Git is a version control system with a de-centralized approach to source control. This means you don\u0026rsquo;t really need a centralized server to work with instead you could have your own local version control system and push to a storage area whenever you feel like. Git was developed by Linus Torvalds, the same guy who wrote Linux Operating System. Git was developed out of frustration as Linus found the existing Source Control Systems were pathetic when it came to managing/collaborating across huge team of developers. If you like to know more, listen to talk by Linus himself on git.\nWant to get your hands dirty on git ? If you are completely new to git, I would recommend you to just try out this 15 minute git tutorial so that whatever I have written below would make sense.\nWorkflow when you working as a single man army The first step would be creating a git repository with the default master branch in a hosting server (github/gitlab/bitbucket). Master branch should always have the copy of the code which is going to go to production. Now create a develop branch, which at any point of time would be the working branch for all the new features you would be adding and this should be in sync with the master branch throughout.\nWorking on a feature Now, let\u0026rsquo;s say you are going to work on a new feature or enhancement. Create a branch with the feature enhancement name from the develop branch. For example, if the feature you are going to work is featureA, create a branch from develop and name it as develop-featureA. Keep working on this branch till you have completed the development. Once you feel, you are done with your unit/integrating testing and feel its ready for production, submit a PR (pull request) from develop-featureA branch to develop branch. I am insisting on a PR instead of a merge as you could leverage the review of your peers/client or even you yourself could take that extra mile in reviewing your code from the stand point of a reviewer instead of a developer. Tag this branch with the release name/version and push it to production whenever it needs to. After it has been deployed to production, merge the tagged version to master.\nWorking on a production defect Its very normal that we would need to send a patch to fix an urgent production issue. During this scenario, the workflow would be this. Sync up your local master and remote master branch. Create a branch from master with the name hot-fix-A and implement the hot fix. Once tested, submit a PR From the hot-fix-A branch to master branch. Review or have some one review it and merge the PR. Now, merge the master branch changes to the feature branch you are working on and continue working.\nWorkflow when you working in a team When you are working in a team, the first step is to create a repo in a hosting server with the default master branch. Create another branch and name it as develop. Now ask your fellow developers to fork this repo. This is with respect to the initial setup. If you team has junior developers who are not experienced, this task of setting up a branch should be done by the senior dev or the team lead. The team lead should have all access to the master repo but the junior developers should just be able to colloborate by forking and submitting PRs.\nWorking on a feature Now lets say your junior devs are working on a feature, they have to create a branch say feature-aa in their own repo and keep working along. Once it has been implemented and passed all the tests, the developer has to send a PR from his feature-aa branch to the develop branch in hosting server/central repo. This PR will undergo the review cycle and the Tech lead/senior dev should merge it with develop branch if it is good to go. If multiple devs are working on the same feature, they must collaborate amongst themselves by syncing their changes frequently. The code must be merged to develop when it is deemed fit for QA/prod deployment. Other developers working on different features must be syncing with develop on a regular/daily basis so that they are up to date with the latest developments. Now when the code is release ready, tag it with the release name. You could continue working on other features in a similar fashion described in this section. Once your code has been deployed to production, merge that tag to master and you all set.\nWorking on a production defect Now, you have deployed your code to production and out pops a high severity bug. The workflow for this is similar to the one that we had when you are working all alone in a project. You just create a branch from master called hot-fix, do the fix, test it. Submit a PR to merge it with develop. Deploy the hot-fix branch to production. Once its confirmed to be working fine, merge it with master and delete the hot-fix branch.\nSummary This git workflow is based on my experience working both in solo projects and also working in a team enviornment. There are lot of blogs which gives you more variations of a git workflow here, here and here. Read through all of them and choose whichever suits you best !!\n","permalink":"/blog/git-workflow/","tags":["git","version-control","best-practices"],"title":"Git workflow - my ramblings"},{"categories":null,"contents":"Angular the framework as this is what the Angular team would like to call, has evolved(and evolving) from being the most popular front end JavaScript framework over the last 5 years to a framework that has transformed itself to survive and be a leader for years to come. All references to Angular points to the version 2 and above and AngularJS means Angular 1.x.\nIn this post, we would be seeing how different is Angular and what are the new additions it is bringing to the world of Single Page App development. Before we start with that, lets first understand what triggered the development of Angular which is essentially a rewrite of the AngularJS framework. Lets discuss about the pain points in AngularJS that made the Angular dev Team rewrite the framework from scratch.\nPain Points in AngularJS Scope pollution To connect the view with data, we know we have to use the $scope object. It was so easy to add whatever the view needs in the scope object and have it rendered in the DOM by Angular. But what this has lead to was too many objects added to the scope and all these cluttered through our controller code which makes maintaining and debugging the application hard. In addition to the current scope, we could also access parent or root scope freely which again creates havoc when we update data at different places in our code base.\nDigest Cycle - Boon becoming a bane Two-way data binding was one killer feature that made developers go \u0026lsquo;wow\u0026rsquo; and one of main reasons to increase Angular JS adoption. But this also brought in the sometimes vicious digest loop. As we have more expressions, ng-repeat, ng-show/hide etc in our views, the digest loop is going to take more time to complete as we would be adding more watchers to the Angular watcherlist. This is going to impact our page responsiveness. Please refer to this blog on how to improve your AngularJS App\u0026rsquo;s performance.\nCommunication among different UI View/Screens - Deep Mesh(s) $broadcast, $emit, $on are used to communicate among sections of your App but all these slow down our App performance as it has to sometimes traverse the entire scope and if its a big complex app, it will have a definite impact on app responsiveness.\nOK. Lets now look at whats new in Angular 2 and how it is addressing the above mentioned issues.\nWhats in Angular 2 ? Think in Terms of Components Angular team realized that the MV* way of building SPA was not fitting into the realm of modern web app development. In came Web Components approach popularized by ReactJS. This is one of the core change in Angular 2, thinking of UI design in terms of components and how they interact and communicate. There is no more concept of global scope as each component has its own scope. This also promotes reusablility of components across the application and even across the organization in the case of an Enterprise.\nBetter Change detection Strategy - Bye Bye Digest Cycle With the component based approach, the change detection strategy has been well optimized thus eliminating the digest cycle. Dirty checking is still employed to detect the changes, but this happens in just one pass across the Component Tree. Use of immutable objects and observables aids in building highly performant apps. For more info on the change detection strategy, please refer to Victor Savkin\u0026rsquo;s blog.\nEmbraces uni-directional flow of data One common problem that we come across when we build large complex SPA is state management. Redux like patterns aim at solving this problem. Though Angular still supports one way and 2 way binding, its better to avoid them especially when you are developing large scale apps where managing state could be a big issue. This design philosophy comes from the React world and we have state management containers like ngrx-store helps in building scalable, maintanable and more importantly predictable apps with Angular 2+. We also have a angular-redux which has the same API as of Redux.\nPlatform agonistic - Angular can run on Server now SPAs are not SEO friendly. With Angular Universal, we can render the first page on the server and send the HTML to the browser thus improving the UX and also making them SEO friendly. As with AngularJS, we can also build Desktop Apps and Hybrid Mobile Apps on top of frameworks like Electron and Ionic.\nEmbracing TypeScript - Stronger Type Checking With so much of code written in Javascript both for backend and frontend, the not so good features of the languages was hindering the progress of this massive JS movement. In came TypeScript, which is a super set of JS with stronger type checking. Now, you could catch lot of errors at compile time rather than at run time. Angular team themselves have used TypeScript to build lot of Angular 2 framework code if not all and they did acknowledge that it helped them in capturing lot of bugs at development time.\nPerformance Benefits, Tooling etc Ahead of Time Compilation (AOT), Lazy loading, Smaller bundle sizes are aimed at lesser page load time and improving the UX. With Angular CLI, scaffolding a new Angular App is super easy with all the tools out of the box.\nConclusion If you are at the cross roads and heavily invested on AngularJS, I would recommend to start and adopt the component way of designing and developig UI Apps introduced from AngularJS 1.5. This would be the first step as you slowly migrate to Angular (2 or above). And with Angular 5 out now, keep looking for the new and cool features getting added to the framework and how you could use them in your apps. Till then, happy learning and coding !!\n","permalink":"/blog/angularjs-vs-angular/","tags":["angularJS","angular"],"title":"Difference between AngularJS and Angular"}]