<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creations on Sundar</title>
    <link>/projects/creations/</link>
    <description>Recent content in Creations on Sundar</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Jul 2022 12:41:05 -0500</lastBuildDate>
    <atom:link href="/projects/creations/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tuition Management App</title>
      <link>/projects/creations/tutora/</link>
      <pubDate>Mon, 11 Jul 2022 12:41:05 -0500</pubDate>
      <guid>/projects/creations/tutora/</guid>
      <description>This is about developing a mobile app for small scale/home based tutors. The app is primarily targetted to reduce the administation hassles of managing/running a online/physical classes. The backend is cloud native and frontend is built using React Native.&#xA;Tech Stack Frontend React Native as UI framework Mobx for state management GraphQL/REST clients for CRUD Backend AWS Serverless for business logic AWS API Gateway for routing AWS Cognito for authentication AWS S3 for storage AWS Event Bridge for integrations with third party apps DataStore Mongo DB Atlas for storing application data Mongo Realm as the persistence layer interface exposing GraphQL server Integrations Twilio for SMS and Email Programming Languages TypeScript JavaScript Architecture </description>
    </item>
    <item>
      <title>ERP Product suite</title>
      <link>/projects/creations/procure/</link>
      <pubDate>Wed, 11 May 2022 12:41:05 -0500</pubDate>
      <guid>/projects/creations/procure/</guid>
      <description>The product is an offering of a typical ERP suite which was being migrated from PHP to MERN. Was involved in both frontend development in React and also backend in NodeJS.&#xA;Tech Stack Frontend Mobile App built on React Native Web App built on React Storybook for building reusable components Redux for state management Urql/REST clients for CRUD Chrome extension built with React Backend AWS Serverless for business logic AWS API Gateway for routing Auth0 for authentication AWS S3 for file storage Lerna for package management DataStore Postgres/MongoDB as data stores ElasticSearch for product data store Programming Languages TypeScript JavaScript </description>
    </item>
    <item>
      <title>A no/low code developer platform for building ML &amp; RPA solutions</title>
      <link>/projects/creations/nocode_platform/</link>
      <pubDate>Tue, 11 Aug 2020 12:41:05 -0500</pubDate>
      <guid>/projects/creations/nocode_platform/</guid>
      <description>This low code platform&amp;rsquo;s objective is to ease the lives of ML and RPA developers by providing a visual drag and drop interface to build solutions for ML and RPA needs. Architected the entire platform right from ground up.&#xA;Tech Stack Frontend React as UI library Redux for state management REST APIs for CRUD Electron for desktop application Backend NestJS for business logic ML microservices NodeRed for low-code development DataStore MongoDB Integrations MLFlow for machine learning lifecycle Programming Languages TypeScript JavaScript Python </description>
    </item>
    <item>
      <title>Search Engine for Discord</title>
      <link>/projects/creations/discord_search_engine/</link>
      <pubDate>Tue, 11 Aug 2020 12:41:05 -0500</pubDate>
      <guid>/projects/creations/discord_search_engine/</guid>
      <description>This is about building an aggregated search engine for Discord servers. Users could see and search on what people are talking publicly on popular discord servers. The current version of app is targeted to be used by people interested in fin tech and crypto news.&#xA;Tech Stack Frontend React, Mithriljs Mobx for state management REST clients for CRUD Backend Feathersjs for REST APIs NodeJS app for data collection/scraping Bullmq for queueing DataStore Redis as in-memory data store Firestore for persistent data storage Programming Languages TypeScript JavaScript </description>
    </item>
    <item>
      <title>Handwritten Data Recognition</title>
      <link>/projects/creations/form_reader/</link>
      <pubDate>Thu, 11 Jun 2020 12:41:05 -0500</pubDate>
      <guid>/projects/creations/form_reader/</guid>
      <description>This was about creating an OCR solution to understand and read hand written information from application forms. This involved using deep learning algorithms for image classification, object detection and character recognition. The entire ML life cycle of gathering data, annotating the data, training the models on different deep learning algorithms was followed and finally the solution was deployed on Cloud.&#xA;Tech Stack Frontend Angular as UI framework REST APIs for CRUD Backend NestJS as backend for UI Flask for ML API AWS S3 for storage AWS EC2 for app container AWS lamda for micro services AWS Auto Scaling for scaling AWS DynamoDB for persistence Tensorflow for deep learning Yolo and Faster RCNN for object detection Inception for image classification DataStore Postgres Programming Languages TypeScript Python Architecture </description>
    </item>
    <item>
      <title>Scanned Cheque OCR</title>
      <link>/projects/creations/cheque_ocr/</link>
      <pubDate>Sun, 11 Aug 2019 12:41:05 -0500</pubDate>
      <guid>/projects/creations/cheque_ocr/</guid>
      <description>As the traditional computer vision solutions were not able to recognize all the printed characters in a scanned cheque, this solution based on deep learning provided an acceptable level of results - More than 80% as opposed the traditional open cv based approach which yielded 60%. This involved annotating and training close to 10000 cheques.I was instrumental in designing and developing the entire solution.&#xA;Tech Stack Backend Flask for ML API Docker Yolo and Faster RCNN for object detection Inception for image classification Tesseract for OCR Tensorflow as the deep learning framework Programming Languages and libraries Python OpenCV </description>
    </item>
    <item>
      <title>FIX Messages Testing tool</title>
      <link>/projects/creations/fix_rattler/</link>
      <pubDate>Fri, 11 Aug 2017 12:41:05 -0500</pubDate>
      <guid>/projects/creations/fix_rattler/</guid>
      <description>This was a tool developed in python to stress test a stock exchange management system. The tool could be configured to pump in different kinds of orders and also the rate at which orders need to be sent.&#xA;Tech Stack Python XML Parser </description>
    </item>
  </channel>
</rss>
